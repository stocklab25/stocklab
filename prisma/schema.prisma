generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  password          String
  role              UserRole           @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  stockTransactions StockTransaction[]

  @@map("users")
}

model Store {
  id        String      @id @default(cuid())
  name      String
  address   String?
  phone     String?
  email     String?
  status    StoreStatus @default(ACTIVE)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?

  // Relations
  storeInventory   StoreInventory[]
  fromTransactions StockTransaction[] @relation("FromStore")
  toTransactions   StockTransaction[] @relation("ToStore")
  sales            Sale[]

  @@map("stores")
}

model Product {
  id                String             @id @default(cuid())
  brand             String
  name              String
  color             String?
  sku               String?            @unique
  itemType          ItemType
  createdAt         DateTime           @default(now())
  deletedAt         DateTime?
  updatedAt         DateTime           @default(now()) @updatedAt
  inventoryItems    InventoryItem[]

  @@map("products")
}

model InventoryItem {
  id                String             @id @default(cuid())
  productId         String
  sku               String
  size              String
  condition         ItemCondition
  cost              Decimal            @db.Decimal(10, 2)
  payout            Decimal            @db.Decimal(10, 2)
  consigner         String
  consignDate       DateTime
  status            InventoryStatus
  quantity          Int                @default(1)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  stockTransactions StockTransaction[]
  storeInventory    StoreInventory[]
  sales             Sale[]

  @@map("inventory_items")
}

model StockTransaction {
  id              String          @id @default(cuid())
  type            TransactionType
  quantity        Int
  date            DateTime
  fromStoreId     String?
  toStoreId       String?
  userId          String?
  notes           String?
  createdAt       DateTime        @default(now())
  inventoryItemId String?
  deletedAt       DateTime?
  updatedAt       DateTime        @default(now()) @updatedAt
  InventoryItem   InventoryItem?  @relation(fields: [inventoryItemId], references: [id])
  user            User?           @relation(fields: [userId], references: [id])
  fromStore       Store?          @relation("FromStore", fields: [fromStoreId], references: [id], onDelete: SetNull)
  toStore         Store?          @relation("ToStore", fields: [toStoreId], references: [id], onDelete: SetNull)

  @@map("stock_transactions")
}

model StoreInventory {
  id              String        @id @default(cuid())
  storeId         String
  inventoryItemId String
  quantity        Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  store           Store         @relation(fields: [storeId], references: [id], onDelete: Restrict)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Restrict)

  @@unique([storeId, inventoryItemId])
  @@map("store_inventory")
}

model Sale {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  storeId         String
  inventoryItemId String
  quantity        Int           @default(1)
  cost            Decimal       @db.Decimal(10, 2)
  payout          Decimal       @db.Decimal(10, 2)
  discount        Decimal?      @db.Decimal(10, 2)
  saleDate        DateTime      @default(now())
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  // Relations
  store           Store         @relation(fields: [storeId], references: [id], onDelete: Restrict)
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Restrict)

  @@map("sales")
}

enum UserRole {
  ADMIN
  USER
}

enum StoreStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum InventoryStatus {
  InStock
  Returned
  OutOfStock
  Discontinued
  Sold
}

enum TransactionType {
  IN
  OUT
  MOVE
  RETURN
  ADJUSTMENT
  AUDIT
  TRANSFER_TO_STORE
  TRANSFER_FROM_STORE
  SALE_AT_STORE
}

enum ItemCondition {
  NEW
  PRE_OWNED
}

enum ItemType {
  SHOE
  APPAREL
}
