generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  name              String
  password          String
  role              UserRole           @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  stockTransactions StockTransaction[]

  @@map("users")
}

model Store {
  id               String             @id @default(cuid())
  name             String
  address          String?
  phone            String?
  email            String?
  status           StoreStatus        @default(ACTIVE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  sales            Sale[]
  fromTransactions StockTransaction[] @relation("FromStore")
  toTransactions   StockTransaction[] @relation("ToStore")
  storeInventory   StoreInventory[]

  @@map("stores")
}

model Product {
  id             String          @id @default(cuid())
  brand          String
  name           String
  color          String?
  sku            String?         @unique
  stocklabSku    String?         @unique
  createdAt      DateTime        @default(now())
  deletedAt      DateTime?
  updatedAt      DateTime        @default(now()) @updatedAt
  itemType       ItemType
  inventoryItems InventoryItem[]
  purchaseOrderItems PurchaseOrderItem[]

  @@map("products")
}

model InventoryItem {
  id                String             @id @default(cuid())
  productId         String
  sku               String
  size              String
  cost              Decimal            @db.Decimal(10, 2)
  status            InventoryStatus
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  quantity          Int                @default(1)
  condition         ItemCondition
  note              InventoryNote?
  purchaseOrderId   String?
  product           Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchaseOrder     PurchaseOrder?     @relation(fields: [purchaseOrderId], references: [id])
  purchases         Purchase[]
  sales             Sale[]
  stockTransactions StockTransaction[]
  storeInventory    StoreInventory[]

  @@map("inventory_items")
}

model StockTransaction {
  id              String          @id @default(cuid())
  type            TransactionType
  quantity        Int
  date            DateTime
  userId          String?
  notes           String?
  createdAt       DateTime        @default(now())
  inventoryItemId String?
  deletedAt       DateTime?
  updatedAt       DateTime        @default(now()) @updatedAt
  fromStoreId     String?
  toStoreId       String?
  fromStore       Store?          @relation("FromStore", fields: [fromStoreId], references: [id])
  InventoryItem   InventoryItem?  @relation(fields: [inventoryItemId], references: [id])
  toStore         Store?          @relation("ToStore", fields: [toStoreId], references: [id])
  user            User?           @relation(fields: [userId], references: [id])

  @@map("stock_transactions")
}

model StoreInventory {
  id              String        @id @default(cuid())
  storeId         String
  inventoryItemId String
  quantity        Int           @default(0)
  transferCost    Decimal       @db.Decimal(10, 2) @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  store           Store         @relation(fields: [storeId], references: [id])

  @@unique([storeId, inventoryItemId])
  @@map("store_inventory")
}

model Sale {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  storeId         String
  inventoryItemId String
  quantity        Int           @default(1)
  cost            Decimal       @db.Decimal(10, 2)
  payout          Decimal       @db.Decimal(10, 2)
  discount        Decimal?      @db.Decimal(10, 2)
  saleDate        DateTime      @default(now())
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  inventoryItem   InventoryItem @relation(fields: [inventoryItemId], references: [id])
  store           Store         @relation(fields: [storeId], references: [id])

  @@map("sales")
}

model Purchase {
  id                     String        @id @default(cuid())
  r3vPurchaseOrderNumber String        @unique
  inventoryItemId        String
  vendor                 String
  paymentMethod          String
  orderNumber            String?
  quantity               Int           @default(1)
  cost                   Decimal       @db.Decimal(10, 2)
  purchaseDate           DateTime      @default(now())
  notes                  String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  deletedAt              DateTime?
  inventoryItem          InventoryItem @relation(fields: [inventoryItemId], references: [id])

  @@map("purchases")
}

model Card {
  id        String    @id @default(cuid())
  name      String
  last4     String?
  bank      String?
  type      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  expenses  Expense[]
}

model Expense {
  id              String          @id @default(cuid())
  transactionDate DateTime
  description     String
  amount          Decimal         @db.Decimal(10, 2)
  type            String
  category        ExpenseCategory
  cardId          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
  card            Card            @relation(fields: [cardId], references: [id])
}

model PurchaseOrder {
  id              String              @id @default(cuid())
  vendorName      String
  orderNumber     String?             @unique
  orderDate       DateTime            @default(now())
  deliveryDate    DateTime?
  status          PurchaseOrderStatus @default(DRAFT)
  totalAmount     Decimal             @db.Decimal(10, 2)
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?
  inventoryItems  InventoryItem[]
  purchaseOrderItems PurchaseOrderItem[]

  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  productId       String
  size            String
  condition       ItemCondition @default(NEW)
  quantityOrdered Int
  unitCost        Decimal       @db.Decimal(10, 2)
  totalCost       Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id])

  @@map("purchase_order_items")
}

enum UserRole {
  ADMIN
  USER
}

enum StoreStatus {
  ACTIVE
  INACTIVE
  CLOSED
}

enum InventoryStatus {
  InStock
  Returned
  OutOfStock
  Discontinued
  Sold
}

enum TransactionType {
  IN
  OUT
  MOVE
  RETURN
  ADJUSTMENT
  AUDIT
  TRANSFER_TO_STORE
  TRANSFER_FROM_STORE
  SALE_AT_STORE
}

enum ItemCondition {
  NEW
  PRE_OWNED
}

enum ItemType {
  SHOE
  APPAREL
  ACCESSORIES
}

enum ExpenseCategory {
  Parking
  Travel
  Inventory
  Supplies
  BusinessServices
  Payment
}

enum PurchaseOrderStatus {
  DRAFT
  SUBMITTED
  DELIVERED
  CANCELLED
}

enum InventoryNote {
  DMG_BOX
  NO_BOX
  REP_BOX
  FLAWED
}
